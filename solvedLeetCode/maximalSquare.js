/**
 * @param {character[][]} matrix
 * @return {number}
 */
var maximalSquare = function (mat) {
	const m = mat.length,
		n = mat[0].length;
	let max = 0;

	const isSquareMat = (i, j) => {
		let l = mat[i - 1][j - 1];

		for (let k = i - 1; k > i - l - 1 && k >= 0; k--)
			if (!mat[k][j]) {
				l = i - k - 1;
				break;
			}
		for (let k = j - 1; k > j - l - 1 && k >= 0; k--)
			if (!mat[i][k]) {
				l = j - k - 1;
				break;
			}
		return l + 1;
	};

	for (let i = 0; i < m; i++)
		for (let j = 0; j < n; j++) {
			mat[i][j] = +mat[i][j];
			if (mat[i][j] && !max) max = 1;
			if (!i || !j || !mat[i][j] || !mat[i - 1][j - 1]) continue;
			mat[i][j] = isSquareMat(i, j);
			max = Math.max(mat[i][j], max);
		}
	console.log(mat);
	return max ** 2;
};

// console.log(
// 	maximalSquare([
// 		["1", "0", "1", "0", "0"],
// 		["1", "0", "1", "1", "1"],
// 		["1", "1", "1", "1", "1"],
// 		["1", "0", "0", "1", "0"],
// 	])
// );
// console.log(
// 	maximalSquare([
// 		["1", "0", "1", "0", "0"],
// 		["1", "0", "1", "1", "1"],
// 		["1", "1", "1", "1", "1"],
// 		["1", "0", "0", "1", "0"],
// 	])
// );

// console.log(
// 	maximalSquare([
// 		["0", "0", "0", "0", "0"],
// 		["0", "0", "0", "0", "0"],
// 		["0", "0", "0", "0", "1"],
// 		["0", "0", "0", "0", "0"],
// 	])
// );

console.log(
	maximalSquare([
		["0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "0", "1", "0"],
		["0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "0"],
		["0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1"],
		["1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "1", "0", "0", "0", "1"],
		["0", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1"],
		["1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1"],
		["1", "1", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0"],
		["0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
		["0", "1", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "1", "1", "1"],
		["1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1"],
		["0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
		["1", "1", "1", "0", "0", "0", "1", "1", "1", "0", "1", "0", "0", "1", "1"],
		["1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1"],
		["1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1"],
		["1", "1", "1", "0", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "1"],
	])
);
