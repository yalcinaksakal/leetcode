/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function (graph, initial) {
	graph = graph.map(row => {
		const newRow = [];
		row.forEach((el, i) => el && newRow.push(i));
		return newRow;
	});
	const infectedBy = {},
		count = {},
		getInfectionFrom = node => {
			const visited = {},
				bfs = [node],
				visit = n => {
					visited[n] = true;
					bfs.push(n);
					infectedBy[n] = infectedBy[n] === undefined ? node : -1;
					//keep the nodes which are infected only single node
				};
			let i = -1;
			while (++i < bfs.length)
				graph[bfs[i]].forEach(n => !visited[n] && visit(n));
		};
	initial.forEach(n => getInfectionFrom(n));
	Object.values(infectedBy)
		.filter(n => n !== -1)
		.forEach(n => (count[n] ? count[n]++ : (count[n] = 1)));
	return Object.keys(count).length
		? +Object.entries(count).sort((a, b) => {
				if (a[1] > b[1]) return -1;
				if (a[1] === b[1] && +a[0] < +b[0]) return -1;
				return 0;
		  })[0][0]
		: Math.min(...initial);
};
console.log(
	minMalwareSpread(
		[
			[1, 1, 0],
			[1, 1, 0],
			[0, 0, 1],
		],
		[0, 1, 2]
	)
);
